---
# This workflow contains steps for building various parts of the tari codebase
'on':
  workflow_call:
    inputs:
      # By default we do NOT build the front-end. Pass `with: build-launchpad-fe: true` to override
      build-launchpad-fe:
        required: false
        default: false
        type: boolean
      # By default we do NOT build the explorer
      build-explorer:
        required: false
        default: false
        type: boolean
      # By default we do NOT build the collectibles app
      build-collectibles:
        required: false
        default: false
        type: boolean
      # By default, we DO require source code to be formatted correctly
      lints:
        required: false
        default: true
        type: boolean
      # If you DON'T want to build the entire Tari code-base pass `with: build-tari: false` and save 40min :)
      build-tari:
        required: false
        default: true
        type: boolean
      # We do NOT check the FFI library by default, so pass `with: check-ffi: true` to override
      check-ffi:
        required: false
        default: false
        type: boolean
      # Set the profile. By default, it is blank (debug)
      profile:
        required: false
        default: ""
        type: string
      # Specify the rust toolchain to use
      toolchain:
        required: false
        default: 'stable'
        type: string

jobs:
  # Runs cargo fmt check and clippy checks
  lints:
    name: Check Rust formatting and clippy rules
    if: ${{ inputs.lints }}
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v4

      # Note: cargo fmt must always be run with nightly
      - name: toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ inputs.toolchain }}
          components: clippy, rustfmt

      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: ubuntu dependencies
        run: |
          sudo apt-get update
          sudo bash scripts/install_ubuntu_dependencies.sh

      - name: cargo fmt
        run: |
          cargo +${{ inputs.toolchain }} fmt --all -- --check

      - name: Install cargo-lints
        run: |
          cargo install cargo-lints

      - name: empty frontend dist directory
        run: |
          mkdir ui/frontend/dist

      - name: Clippy check (with lints)
        run: |
          cargo lints clippy --all-targets --all-features

  # Does not do a full build, just a syntax check, which is far quicker
  check:
    name: Syntax check ${{ inputs.profile }}
    # Only run this job if at least one of the "check" parameters are set
    if: ${{ inputs.build-tari || inputs.build-launchpad-fe || inputs.check-ffi }}
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.toolchain }}

      - name: empty frontend dist directory
        run: |
          mkdir ui/frontend/dist

      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: ubuntu dependencies
        if: ${{ inputs.build-tari }}
        run: |
          sudo apt-get update
          sudo bash scripts/install_ubuntu_dependencies.sh

      - name: rustup show
        if: ${{ inputs.build-tari }}
        run: |
          rustup show

      - name: cargo check
        if: ${{ inputs.build-tari }}
        run: |
          cargo check ${{ inputs.profile }} --all-targets --locked

      - name: cargo check ffi separately
        if: ${{ inputs.check-ffi }}
        run: |
          cargo check ${{ inputs.profile }} --package tari_wallet_ffi

  js-applications:
    name: Build javascript applications
    if: ${{ inputs.build-launchpad-fe || inputs.build-collectibles || inputs.build-explorer }}
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # cache: 'yarn'

      - name: Install Yarn
        run: npm install -g yarn

      - name: log javascript environment
        run: |
          echo node $(node -v)
          echo npm v$(npm -v)
          echo yarn v$(yarn -v)

      - name: build gui-react
        if: ${{ inputs.build-launchpad-fe }}
        # Replace 'yarn build' with 'yarn tauri build' to build both, fronted (react) and backend
        run: |
          cd gui-react
          yarn install
          yarn lint:ci
          yarn test:ci
          yarn build

      - name: build collectibles web-app
        if: ${{ inputs.build-collectibles }}
        run: |
          cd applications/tari_collectibles/web-app
          npm ci
          npm run build

      - name: lint/fmt tari explorer
        if: ${{ inputs.build-explorer }}
        run: |
          cd applications/tari_explorer
          npm ci
          npm run lint
          npm run check-fmt
