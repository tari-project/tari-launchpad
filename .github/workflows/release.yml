---
name: Release

'on':
  push:
    paths-ignore:
      - '**/*.md'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    branches:
      - 'main'
      - 'build-*'
  workflow_dispatch:

concurrency:
  # https://docs.github.com/en/actions/examples/using-concurrency-expressions-and-a-test-matrix
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: ${{ !startsWith(github.ref, 'refs/tags/v') || github.ref != 'refs/heads/main' }}

permissions: {}

jobs:
  builds:
    name: Building ${{ matrix.platform }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-2019"
            args: ""
          - platform: "macos-latest"
            args: "--verbose --target universal-apple-darwin"
#          - platform: "macos-latest" # for Arm based macs (M1 and above).
#            args: "--target aarch64-apple-darwin"
#          - platform: "macos-latest" # for Intel based macs.
#            args: "--target x86_64-apple-darwin"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Node.js setup
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Rust setup (native)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: 'wasm32-unknown-unknown'

      - name: Rust setup (macOS)
        if: startsWith(runner.os,'macOS')
        uses: dtolnay/rust-toolchain@stable
        with:
          target: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Rust setup (linux)
        if: startsWith(runner.os,'Linux')
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu

      - name: Cache cargo files and outputs
        if: ${{ ( ! startsWith(github.ref, 'refs/tags/v') ) }}
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies (macOS)
        if: startsWith(runner.os,'macOS')
        run: |
          # openssl, cmake, autoconf and zip already installed
          brew install coreutils automake protobuf

      - name: Install dependencies (linux)
        if: startsWith(runner.os,'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends --assume-yes \
            libwebkit2gtk-4.0-dev \
            build-essential \
            wget \
            file \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup2.4-dev \
            patchelf \
            apt-transport-https \
            ca-certificates \
            curl \
            gpg \
            openssl \
            libssl-dev \
            pkg-config \
            libsqlite3-dev \
            git \
            cmake \
            dh-autoreconf \
            libc++-dev \
            libc++abi-dev \
            libprotobuf-dev \
            protobuf-compiler \
            libncurses5-dev \
            libncursesw5-dev \
            zip

      - name: Install dependencies (windows)
        if: startsWith(runner.os,'Windows')
        shell: bash
        run: |
          vcpkg.exe install sqlite3:x64-windows zlib:x64-windows
          # Bug in choco - need to install each package individually
          choco upgrade llvm -y
          # psutils is out of date
          # choco upgrade psutils -y
          choco upgrade openssl -y
          # Should already be installed
          # choco upgrade strawberryperl -y
          choco upgrade protoc -y
          echo "SQLITE3_LIB_DIR=C:\vcpkg\installed\x64-windows\lib" >> $GITHUB_ENV
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $GITHUB_ENV
          echo "C:\Strawberry\perl\bin" >> $GITHUB_PATH

      - name: Install dependencies (node)
        run: |
          npm --version
          cd ui/frontend
          npm install

      - name: Build Tauri apps
        uses: tauri-apps/tauri-action@dev
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'tari-launchpad v__VERSION__'
          #releaseId: '0.1.0'
          projectPath: ui
          #includeDebug: ${{ ( ! startsWith(github.ref, 'refs/tags/v') ) }}
          #includeRelease: ${{ ( startsWith(github.ref, 'refs/tags/v') ) }}
          includeDebug: false
          includeRelease: true
          includeUpdaterJson: true
          #updaterJsonKeepUniversal: true
          updaterJsonKeepUniversal: false
          releaseBody: "The Tari-Launcher"
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

#      - name: Upload
#        uses: actions/upload-artifact@v4
#        with:
#          name: tari-launchpad_${{ steps.build.outputs.appVersion }}_${{ matrix.platform }}
#          path: "${{ join(fromJSON(steps.build.outputs.artifactPaths), '\n') }}"
